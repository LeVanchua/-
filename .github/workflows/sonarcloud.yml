name: SonarCloud Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  sonar:
    name: SonarCloud Scan
    runs-on: windows-latest
    steps:
      # Checkout repo
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup .NET 8 SDK
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Install SonarScanner
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
        shell: pwsh

      # Begin SonarCloud analysis
      - name: SonarScanner Begin
        run: |
          dotnet sonarscanner begin `
            /k:"LeVanchua_-" `
            /o:"levanchua" `
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.xml" `
            /d:sonar.cpd.cs.minimumTokens=40 `
            /d:sonar.cpd.cs.minimumLines=5 `
            /d:sonar.exclusions=**/bin/**,**/obj/**,**/sonarcloud.yml `
            /d:sonar.qualitygate.wait=true
        shell: pwsh

      # Restore & Build
      - name: Restore Dependencies
        run: dotnet restore NetSdrClient.sln

      - name: Build Solution
        run: dotnet build NetSdrClient.sln -c Release --no-restore

      # Run tests with coverage
      - name: Test with Coverage
        run: |
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj -c Release --no-build `
            /p:CollectCoverage=true `
            /p:CoverletOutput=TestResults/coverage.xml `
            /p:CoverletOutputFormat=opencover
        shell: pwsh

      # End SonarCloud analysis
      - name: SonarScanner End
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        shell: pwsh
