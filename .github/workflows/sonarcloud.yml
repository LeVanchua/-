name: SonarCloud analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read # дозволяє SonarCloud додавати коментарі до PR

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest

    steps:
      # 1️⃣ Отримуємо код репозиторію
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # потрібно для повної історії git

      # 2️⃣ Встановлюємо .NET SDK 8
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # 3️⃣ Встановлюємо SonarScanner
      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner
        shell: pwsh

      - name: Add dotnet tools to PATH
        run: echo "$env:USERPROFILE\.dotnet\tools" >> $env:GITHUB_PATH
        shell: pwsh

      # 4️⃣ Запуск початку аналізу Sonar
      - name: SonarScanner Begin
        shell: pwsh
        run: |
          dotnet sonarscanner begin `
            /k:"LeVanchua_-" `
            /o:"levanchua" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.cs.opencover.reportsPaths="**/TestResults/coverage.xml" `
            /d:sonar.exclusions="**/bin/**,**/obj/**,**/*.yml" `
            /d:sonar.qualitygate.wait=true

      # 5️⃣ Restore & Build
      - name: Restore dependencies
        run: dotnet restore NetSdrClient.sln

      - name: Build project
        run: dotnet build NetSdrClient.sln -c Release --no-restore

      # 6️⃣ Тестування з покриттям (OpenCover)
      - name: Run tests with coverage
        shell: pwsh
        run: |
          dotnet test NetSdrClientAppTests/NetSdrClientAppTests.csproj -c Release --no-build `
            /p:CollectCoverage=true `
            /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=TestResults/coverage.xml

      # 7️⃣ Завершення аналізу
      - name: SonarScanner End
        shell: pwsh
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
